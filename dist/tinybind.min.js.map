{"version":3,"file":"tinybind.min.js","sources":["../src/constants.js","../src/parsers.js","../src/observer.js","../src/tinybind.js","../src/bindings.js","../src/component-bindings.js","../src/view.js","../src/adapter.js","../src/binders.js","../src/export.js"],"sourcesContent":["export const OPTIONS = [\n  'prefix',\n  'templateDelimiters',\n  'rootInterface',\n  'preloadData',\n  'handler'\n];\n\nexport const EXTENSIONS = [\n  'binders',\n  'formatters',\n  'components',\n  'adapters'\n];","const PRIMITIVE = 0\nconst KEYPATH = 1\nconst TEXT = 0\nconst BINDING = 1\n\nconst QUOTED_STR = /^'.*'$|^\".*\"$/\n\n// Parser and tokenizer for getting the type and value from a string.\nexport function parseType(string) {\n  let type = PRIMITIVE\n  let value = string\n\n  if (QUOTED_STR.test(string)) {\n    value = string.slice(1, -1)\n  } else if (string === 'true') {\n    value = true\n  } else if (string === 'false') {\n    value = false\n  } else if (string === 'null') {\n    value = null\n  } else if (string === 'undefined') {\n    value = undefined\n  } else if (!isNaN(string)) {\n    value = Number(string)\n  } else {\n    type = KEYPATH\n  }\n\n  return {type: type, value: value}\n}\n\n// Template parser and tokenizer for mustache-style text content bindings.\n// Parses the template and returns a set of tokens, separating static portions\n// of text from binding declarations.\nexport function parseTemplate(template, delimiters) {\n  var tokens\n  let length = template.length\n  let index = 0\n  let lastIndex = 0\n  let open = delimiters[0], close = delimiters[1]\n\n  while (lastIndex < length) {\n    index = template.indexOf(open, lastIndex)\n\n    if (index < 0) {\n      if (tokens) {\n        tokens.push({\n          type: TEXT,\n          value: template.slice(lastIndex)\n        })\n      }\n\n      break\n    } else {\n      tokens || (tokens = [])\n      if (index > 0 && lastIndex < index) {\n        tokens.push({\n          type: TEXT,\n          value: template.slice(lastIndex, index)\n        })\n      }\n\n      lastIndex = index + open.length\n      index = template.indexOf(close, lastIndex)\n\n      if (index < 0) {\n        let substring = template.slice(lastIndex - close.length)\n        let lastToken = tokens[tokens.length - 1]\n\n        if (lastToken && lastToken.type === TEXT) {\n          lastToken.value += substring\n        } else {\n          tokens.push({\n            type: TEXT,\n            value: substring\n          })\n        }\n\n        break\n      }\n\n      let value = template.slice(lastIndex, index).trim()\n\n      tokens.push({\n        type: BINDING,\n        value: value\n      })\n\n      lastIndex = index + close.length\n    }\n  }\n\n  return tokens\n}\n","\n// Check if a value is an object than can be observed.\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj !== null\n}\n\n// Error thrower.\nfunction error(message) {\n  throw new Error('[Observer] ' + message)\n}\n\nvar adapters;\nvar interfaces;\nvar rootInterface;\n\n// Constructs a new keypath observer and kicks things off.\nfunction Observer(obj, keypath, callback) {\n  this.keypath = keypath;\n  this.callback = callback;\n  this.objectPath = [];\n  this.parse();\n  this.obj = this.getRootObject(obj);\n\n  if (isObject(this.target = this.realize())) {\n    this.set(true, this.key, this.target, this.callback);\n  }\n}\n\nObserver.updateOptions = function(options) {\n  adapters = options.adapters;\n  interfaces = Object.keys(adapters);\n  rootInterface = options.rootInterface;\n}\n\n// Tokenizes the provided keypath string into interface + path tokens for the\n// observer to work with.\nObserver.tokenize = function(keypath, root) {\n  var tokens = []\n  var current = {i: root, path: ''};\n  var index, chr;\n\n  for (index = 0; index < keypath.length; index++) {\n    chr = keypath.charAt(index);\n\n    if (!!~interfaces.indexOf(chr)) {\n      tokens.push(current)\n      current = {i: chr, path: ''};\n    } else {\n      current.path += chr;\n    }\n  }\n\n  tokens.push(current);\n  return tokens;\n}\n\n// Parses the keypath using the interfaces defined on the view. Sets variables\n// for the tokenized keypath as well as the end key.\nObserver.prototype.parse = function() {\n  var path, root;\n\n  if (!interfaces.length) {\n    error('Must define at least one adapter interface.');\n  }\n\n  if (!!~interfaces.indexOf(this.keypath[0])) {\n    root = this.keypath[0];\n    path = this.keypath.substr(1);\n  } else {\n    root = rootInterface;\n    path = this.keypath;\n  }\n\n  this.tokens = Observer.tokenize(path, root)\n  this.key = this.tokens.pop()\n}\n\n// Realizes the full keypath, attaching observers for every key and correcting\n// old observers to any changed objects in the keypath.\nObserver.prototype.realize = function() {\n  var current = this.obj\n  var unreached = -1\n  var prev\n  var token\n\n  for (let index = 0; index < this.tokens.length; index++) {\n    token = this.tokens[index]\n    if (isObject(current)) {\n      if (typeof this.objectPath[index] !== 'undefined') {\n        if (current !== (prev = this.objectPath[index])) {\n          this.set(false, token, prev, this)\n          this.set(true, token, current, this)\n          this.objectPath[index] = current\n        }\n      } else {\n        this.set(true, token, current, this)\n        this.objectPath[index] = current\n      }\n\n      current = this.get(token, current)\n    } else {\n      if (unreached === -1) {\n        unreached = index\n      }\n\n      if (prev = this.objectPath[index]) {\n        this.set(false, token, prev, this)\n      }\n    }\n  }\n\n  if (unreached !== -1) {\n    this.objectPath.splice(unreached)\n  }\n\n  return current\n}\n\n// Updates the keypath. This is called when any intermediary key is changed.\nObserver.prototype.sync = function() {\n  var next, oldValue, newValue\n\n  if ((next = this.realize()) !== this.target) {\n    if (isObject(this.target)) {\n      this.set(false, this.key, this.target, this.callback)\n    }\n\n    if (isObject(next)) {\n      this.set(true, this.key, next, this.callback)\n    }\n\n    oldValue = this.value()\n    this.target = next\n    newValue = this.value()\n    if (newValue !== oldValue || newValue instanceof Function) this.callback.sync()\n  } else if (next instanceof Array) {\n    this.callback.sync()\n  }\n}\n\n// Reads the current end value of the observed keypath. Returns undefined if\n// the full keypath is unreachable.\nObserver.prototype.value = function() {\n  if (isObject(this.target)) {\n    return this.get(this.key, this.target)\n  }\n}\n\n// Sets the current end value of the observed keypath. Calling setValue when\n// the full keypath is unreachable is a no-op.\nObserver.prototype.setValue = function(value) {\n  if (isObject(this.target)) {\n    adapters[this.key.i].set(this.target, this.key.path, value)\n  }\n}\n\n// Gets the provided key on an object.\nObserver.prototype.get = function(key, obj) {\n  return adapters[key.i].get(obj, key.path)\n}\n\n// Observes or unobserves a callback on the object using the provided key.\nObserver.prototype.set = function(active, key, obj, callback) {\n  var action = active ? 'observe' : 'unobserve'\n  adapters[key.i][action](obj, key.path, callback)\n}\n\n\n// Unobserves the entire keypath.\nObserver.prototype.unobserve = function() {\n  var obj\n  var token\n\n  for (let index = 0; index < this.tokens.length; index++) {\n    token = this.tokens[index]\n    if (obj = this.objectPath[index]) {\n      this.set(false, token, obj, this)\n    }\n  }\n\n  if (isObject(this.target)) {\n    this.set(false, this.key, this.target, this.callback)\n  }\n}\n// traverse the scope chain to find the scope which has the root property\n// if the property is not found in chain, returns the root scope\nObserver.prototype.getRootObject = function (obj) {\n  var rootProp, current;\n  if (!obj.$parent) {\n    return obj;\n  }\n\n  if (this.tokens.length) {\n    rootProp = this.tokens[0].path\n  } else {\n    rootProp = this.key.path\n  }\n\n  current = obj;\n  while (current.$parent && (current[rootProp] === undefined)) {\n    current = current.$parent\n  }\n\n  return current;\n}\n\nexport default Observer\n","import {EXTENSIONS} from './constants';\nimport {parseTemplate, parseType} from './parsers';\n\nconst tinybind = {\n  // Global binders.\n  binders: {},\n\n  // Global components.\n  components: {},\n\n  // Global formatters.\n  formatters: {},\n\n  // Global sightglass adapters.\n  adapters: {},\n\n  // Default attribute prefix.\n  _prefix: 'rv',\n\n  _fullPrefix: 'rv-',\n\n  get prefix () {\n    return this._prefix;\n  },\n\n  set prefix (value) {\n    this._prefix = value;\n    this._fullPrefix = value + '-';\n  },\n\n  parseTemplate: parseTemplate,\n\n  parseType: parseType,\n\n  // Default template delimiters.\n  templateDelimiters: ['{', '}'],\n\n  // Default sightglass root interface.\n  rootInterface: '.',\n\n  // Preload data by default.\n  preloadData: true,\n\n  // Default event handler.\n  handler: function(context, ev, binding) {\n    this.call(context, ev, binding.view.models);\n  },\n\n  // Sets the attribute on the element. If no binder above is matched it will fall\n  // back to using this binder.\n  fallbackBinder: function(el, value) {\n    if (value != null) {\n      el.setAttribute(this.type, value);\n    } else {\n      el.removeAttribute(this.type);\n    }  \n  },\n\n  // Merges an object literal into the corresponding global options.\n  configure: function(options) {\n    if (!options) {\n      return;\n    }\n    Object.keys(options).forEach(option => {\n      let value = options[option];\n\n      if (EXTENSIONS.indexOf(option) > -1) {\n        Object.keys(value).forEach(key => {\n          this[option][key] = value[key];\n        });\n      } else {\n        this[option] = value;\n      }\n    });\n  }\n};\n\nexport default tinybind;\n","import {parseType} from './parsers';\nimport Observer from './observer';\n\nfunction getInputValue(el) {\n  let results = [];\n  if (el.type === 'checkbox') {\n    return el.checked;\n  } else if (el.type === 'select-multiple') {\n\n    el.options.forEach(option => {\n      if (option.selected) {\n        results.push(option.value);\n      }\n    });\n\n    return results;\n  } else {\n    return el.value;\n  }\n}\n\nconst FORMATTER_ARGS =  /[^\\s']+|'([^']|'[^\\s])*'|\"([^\"]|\"[^\\s])*\"/g;\nconst FORMATTER_SPLIT = /\\s+/;\n\n// A single binding between a model attribute and a DOM element.\nexport class Binding {\n  // All information about the binding is passed into the constructor; the\n  // containing view, the DOM node, the type of binding, the model object and the\n  // keypath at which to listen for changes.\n  constructor(view, el, type, keypath, binder, arg, formatters) {\n    this.view = view;\n    this.el = el;\n    this.type = type;\n    this.keypath = keypath;\n    this.binder = binder;\n    this.arg = arg;\n    this.formatters = formatters;\n    this.formatterObservers = {};\n    this.model = undefined;\n  }\n\n  // Observes the object keypath\n  observe(obj, keypath) {\n    return new Observer(obj, keypath, this);\n  }\n\n  parseTarget() {\n    if (this.keypath) {\n      let token = parseType(this.keypath);\n\n      if (token.type === 0) {\n        this.value = token.value;\n      } else {\n        this.observer = this.observe(this.view.models, this.keypath);\n        this.model = this.observer.target;\n      }\n    } else {\n      this.value = undefined;\n    }\n  }\n\n  parseFormatterArguments(args, formatterIndex) {\n    return args\n      .map(parseType)\n      .map(({type, value}, ai) => {\n        if (type === 0) {\n          return value;\n        } else {\n          if (!this.formatterObservers[formatterIndex]) {\n            this.formatterObservers[formatterIndex] = {};\n          }\n\n          let observer = this.formatterObservers[formatterIndex][ai];\n\n          if (!observer) {\n            observer = this.observe(this.view.models, value);\n            this.formatterObservers[formatterIndex][ai] = observer;\n          }\n\n          return observer.value();\n        }\n      });\n  }\n\n  // Applies all the current formatters to the supplied value and returns the\n  // formatted value.\n  formattedValue(value) {\n    return this.formatters.reduce((result, declaration, index) => {\n      let args = declaration.match(FORMATTER_ARGS);\n      let id = args.shift();\n      let formatter = this.view.options.formatters[id];\n\n      const processedArgs = this.parseFormatterArguments(args, index);\n\n      if (formatter && (formatter.read instanceof Function)) {\n        result = formatter.read(result, ...processedArgs);\n      } else if (formatter instanceof Function) {\n        result = formatter(result, ...processedArgs);\n      }\n      return result;\n    }, value);\n  }\n\n  // Returns an event handler for the binding around the supplied function.\n  eventHandler(fn) {\n    let binding = this;\n    let handler = binding.view.options.handler;\n\n    return function(ev) {\n      handler.call(fn, this, ev, binding);\n    };\n  }\n\n  // Sets the value for the binding. This Basically just runs the binding routine\n  // with the supplied value formatted.\n  set(value) {\n    if ((value instanceof Function) && !this.binder.function) {\n      value = this.formattedValue(value.call(this.model));\n    } else {\n      value = this.formattedValue(value);\n    }\n\n    let routineFn = this.binder.routine || this.binder;\n\n    if (routineFn instanceof Function) {\n      routineFn.call(this, this.el, value);\n    }\n  }\n\n  // Syncs up the view binding with the model.\n  sync() {\n    if (this.observer) {\n      this.model = this.observer.target;\n      this.set(this.observer.value());\n    } else {\n      this.set(this.value);\n    }\n  }\n\n  // Publishes the value currently set on the input element back to the model.\n  publish() {\n    if (this.observer) {\n      var value = this.formatters.reduceRight((result, declaration, index) => {\n        const args = declaration.split(FORMATTER_SPLIT);\n        const id = args.shift();\n        const formatter = this.view.options.formatters[id];\n        const processedArgs = this.parseFormatterArguments(args, index);\n\n        if (formatter && formatter.publish) {\n          result = formatter.publish(result, ...processedArgs);\n        }\n        return result;\n      }, this.getValue(this.el));\n\n      this.observer.setValue(value);\n    }\n  }\n\n  // Subscribes to the model for changes at the specified keypath. Bi-directional\n  // routines will also listen for changes on the element to propagate them back\n  // to the model.\n  bind() {\n    this.parseTarget();\n\n    if (this.binder.hasOwnProperty('bind')) {\n      this.binder.bind.call(this, this.el);\n    }\n\n    if (this.view.options.preloadData) {\n      this.sync();\n    }\n  }\n\n  // Unsubscribes from the model and the element.\n  unbind() {\n    if (this.binder.unbind) {\n      this.binder.unbind.call(this, this.el);\n    }\n\n    if (this.observer) {\n      this.observer.unobserve();\n    }\n\n    Object.keys(this.formatterObservers).forEach(fi => {\n      let args = this.formatterObservers[fi];\n\n      Object.keys(args).forEach(ai => {\n        args[ai].unobserve();\n      });\n    });\n\n    this.formatterObservers = {};\n  }\n\n  // Updates the binding's model from what is currently set on the view. Unbinds\n  // the old model first and then re-binds with the new model.\n  update(models = {}) {\n    if (this.observer) {\n      this.model = this.observer.target;\n    }\n\n    if (this.binder.update) {\n      this.binder.update.call(this, models);\n    }\n  }\n\n  // Returns elements value\n  getValue(el) {\n    if (this.binder && this.binder.getValue) {\n      return this.binder.getValue.call(this, el);\n    } else {\n      return getInputValue(el);\n    }\n  }\n}\n","import {EXTENSIONS, OPTIONS} from './constants';\nimport {Binding} from './bindings';\n\n// component view encapsulated as a binding within it's parent view.\nexport class ComponentBinding extends Binding {\n  // Initializes a component binding for the specified view. The raw component\n  // element is passed in along with the component type. Attributes and scope\n  // inflections are determined based on the components defined attributes.\n  constructor(view, el, type) {\n    super(view, el, type, null, null, null, null);\n    this.view = view;\n    this.el = el;\n    this.type = type;\n    this.component = view.options.components[this.type];\n    this.static = {};\n    this.observers = {};\n    this.upstreamObservers = {};\n    \n    let bindingPrefix = tinybind._fullPrefix;\n    \n    for (let i = 0, len = el.attributes.length; i < len; i++) {\n      let attribute = el.attributes[i];\n      if (attribute.name.indexOf(bindingPrefix) !== 0) {\n        let propertyName = this.camelCase(attribute.name);\n        let stat = this.component.static;\n    \n        if (stat && stat.indexOf(propertyName) > -1) {\n          this.static[propertyName] = attribute.value;\n        } else {\n          this.observers[propertyName] = attribute.value;\n        }\n      }\n    }\n  }\n    \n    \n  // Intercepts `tinybind.Binding::sync` since component bindings are not bound to\n  // a particular model to update it's value.\n  sync() {}\n    \n  // Intercepts `tinybind.Binding::update` since component bindings are not bound\n  // to a particular model to update it's value.\n  update() {}\n    \n  // Intercepts `tinybind.Binding::publish` since component bindings are not bound\n  // to a particular model to update it's value.\n  publish() {}\n    \n  // Returns an object map using the component's scope inflections.\n  locals() {\n    let result = {};\n    \n    Object.keys(this.static).forEach(key => {\n      result[key] = this.static[key];\n    });\n    \n    Object.keys(this.observers).forEach(key => {\n      result[key] = this.observers[key].value();\n    });\n    \n    return result;\n  }\n    \n  // Returns a camel-cased version of the string. Used when translating an\n  // element's attribute name into a property name for the component's scope.\n  camelCase(string) {\n    return string.replace(/-([a-z])/g, grouped => {\n      grouped[1].toUpperCase();\n    });\n  }\n    \n  // Intercepts `tinybind.Binding::bind` to build `@componentView` with a localized\n  // map of models from the root view. Bind `@componentView` on subsequent calls.\n  bind() {\n    var options = {};\n    if (!this.bound) {\n      Object.keys(this.observers).forEach(key => {\n        let keypath = this.observers[key];\n    \n        this.observers[key] = this.observe(this.view.models, keypath, (key => {\n          return () => {\n            this.componentView.models[key] = this.observers[key].value();\n          };\n        }).call(this, key));\n      });\n    \n      this.bound = true;\n    }\n    \n    if (this.componentView) {\n      this.componentView.bind();\n    } else {\n      this.el.innerHTML = this.component.template.call(this);\n      let scope = this.component.initialize.call(this, this.el, this.locals());\n      this.el._bound = true;\n    \n    \n      EXTENSIONS.forEach(extensionType => {\n        options[extensionType] = {};\n    \n        if (this.component[extensionType]) {\n          Object.keys(this.component[extensionType]).forEach(key => {\n            options[extensionType][key] = this.component[extensionType][key];\n          });\n        }\n    \n        Object.keys(this.view.options[extensionType]).forEach(key => {\n          if (options[extensionType][key]) {\n            options[extensionType][key] = this.view[extensionType][key];\n          }\n        });\n      });\n    \n      OPTIONS.forEach(option => {\n        if (this.component[option] != null) {\n          options[option] = this.component[option];\n        } else {\n          options[option] = this.view[option];\n        }\n      });\n    \n      //there's a cyclic dependency that makes imported View a dummy object. Use tinybind.bind\n      //this.componentView = new View(this.el, scope, options)\n      //this.componentView.bind()\n      this.componentView = tinybind.bind(Array.prototype.slice.call(this.el.childNodes), scope, options);\n    \n      Object.keys(this.observers).forEach(key => {\n        let observer = this.observers[key];\n        let models = this.componentView.models;\n    \n        let upstream = this.observe(models, key, ((key, observer) => {\n          return () => {\n            observer.setValue(this.componentView.models[key]);\n          };\n        }).call(this, key, observer));\n    \n        this.upstreamObservers[key] = upstream;\n      });\n    }\n  }\n    \n  // Intercept `tinybind.Binding::unbind` to be called on `@componentView`.\n  unbind() {\n    Object.keys(this.upstreamObservers).forEach(key => {\n      this.upstreamObservers[key].unobserve();\n    });\n    \n    Object.keys(this.observers).forEach(key => {\n      this.observers[key].unobserve();\n    });\n    \n    if (this.componentView) {\n      this.componentView.unbind.call(this);\n    }\n  }\n}","import tinybind from './tinybind';\nimport { Binding } from './bindings';\nimport { ComponentBinding } from './component-bindings';\nimport { parseTemplate } from './parsers';\n\nconst textBinder = {\n  routine: (node, value) => {\n    node.data = (value != null) ? value : '';\n  }\n};\n\nconst DECLARATION_SPLIT = /((?:'[^']*')*(?:(?:[^\\|']*(?:'[^']*')+[^\\|']*)+|[^\\|]+))|^$/g;\n\nconst parseNode = (view, node) => {\n  let block = false;\n\n  if (node.nodeType === 3) {\n    let tokens = parseTemplate(node.data, tinybind.templateDelimiters);\n\n    if (tokens) {\n      for (let i = 0; i < tokens.length; i++) {\n        let token = tokens[i];\n        let text = document.createTextNode(token.value);\n        node.parentNode.insertBefore(text, node);\n\n        if (token.type === 1) {\n          view.buildBinding(text, null, token.value, textBinder, null);\n        }\n      }\n\n      node.parentNode.removeChild(node);\n    }\n    block = true;\n  } else if (node.nodeType === 1) {\n    block = view.traverse(node);\n  }\n\n  if (!block) {\n    for (let i = 0; i < node.childNodes.length; i++) {\n      parseNode(view, node.childNodes[i]);\n    }\n  }\n};\n\nconst bindingComparator = (a, b) => {\n  let aPriority = a.binder ? (a.binder.priority || 0) : 0;\n  let bPriority = b.binder ? (b.binder.priority || 0) : 0;\n  return bPriority - aPriority;\n};\n\nconst trimStr = (str) => {\n  return str.trim();\n};\n\n// A collection of bindings built from a set of parent nodes.\nexport default class View {\n  // The DOM elements and the model objects for binding are passed into the\n  // constructor along with any local options that should be used throughout the\n  // context of the view and it's bindings.\n  constructor(els, models, options) {\n    if (els.jquery || els instanceof Array) {\n      this.els = els;\n    } else {\n      this.els = [els];\n    }\n\n    this.models = models;\n    this.options = options;\n\n    this.build();\n  }\n\n\n  buildBinding(node, type, declaration, binder, arg) {\n    let pipes = declaration.match(DECLARATION_SPLIT).map(trimStr);\n\n    let keypath = pipes.shift();\n\n    this.bindings.push(new Binding(this, node, type, keypath, binder, arg, pipes));\n  }\n\n  // Parses the DOM tree and builds `Binding` instances for every matched\n  // binding declaration.\n  build() {\n    this.bindings = [];\n\n    let elements = this.els, i, len;\n    for (i = 0, len = elements.length; i < len; i++) {\n      parseNode(this, elements[i]);\n    }\n\n    this.bindings.sort(bindingComparator);\n  }\n\n  traverse(node) {\n    let bindingPrefix = tinybind._fullPrefix;\n    let block = node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE';\n    let attributes = node.attributes;\n    let bindInfos = [];\n    let starBinders = this.options.starBinders;\n    var type, binder, identifier, arg;\n\n\n    for (let i = 0, len = attributes.length; i < len; i++) {\n      let attribute = attributes[i];\n      if (attribute.name.indexOf(bindingPrefix) === 0) {\n        type = attribute.name.slice(bindingPrefix.length);\n        binder = this.options.binders[type];\n        arg = undefined;\n\n        if (!binder) {\n          for (let k = 0; k < starBinders.length; k++) {\n            identifier = starBinders[k];\n            if (type.slice(0, identifier.length - 1) === identifier.slice(0, -1)) {\n              binder = this.options.binders[identifier];\n              arg = type.slice(identifier.length - 1);\n              break;\n            }\n          }\n        }\n\n        if (!binder) {\n          binder = tinybind.fallbackBinder;\n        }\n\n        if (binder.block) {\n          this.buildBinding(node, type, attribute.value, binder, arg);\n          node.removeAttribute(attribute.name);\n          return true;\n        }\n\n        bindInfos.push({attr: attribute, binder: binder, type: type, arg: arg});\n      }\n    }\n\n    for (let i = 0; i < bindInfos.length; i++) {\n      let bindInfo = bindInfos[i];\n      this.buildBinding(node, bindInfo.type, bindInfo.attr.value, bindInfo.binder, bindInfo.arg);\n      node.removeAttribute(bindInfo.attr.name);\n    }\n\n    // bind components\n    if (!block) {\n      type = node.nodeName.toLowerCase();\n\n      if (this.options.components[type] && !node._bound) {\n        this.bindings.push(new ComponentBinding(this, node, type));\n        block = true;\n      }\n    }\n\n    return block;\n  }\n\n  // Binds all of the current bindings for this view.\n  bind() {\n    this.bindings.forEach(binding => {\n      binding.bind();\n    });\n  }\n\n  // Unbinds all of the current bindings for this view.\n  unbind() {\n    this.bindings.forEach(binding => {\n      binding.unbind();\n    });\n  }\n\n  // Syncs up the view with the model by running the routines on all bindings.\n  sync() {\n    this.bindings.forEach(binding => {\n      binding.sync();\n    });\n  }\n\n  // Publishes the input values from the view back to the model (reverse sync).\n  publish() {\n    this.bindings.forEach(binding => {\n      if (binding.binder && binding.binder.publishes) {\n        binding.publish();\n      }\n    });\n  }\n\n  // Updates the view's models along with any affected bindings.\n  update(models = {}) {\n    Object.keys(models).forEach(key => {\n      this.models[key] = models[key];\n    });\n\n    this.bindings.forEach(binding => {\n      if (binding.update) {\n        binding.update(models);\n      }\n    });\n  }\n}\n","// The default `.` adapter that comes with tinybind.js. Allows subscribing to\n// properties on plain objects, implemented in ES5 natives using\n// `Object.defineProperty`.\n\nconst ARRAY_METHODS = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'sort',\n  'reverse',\n  'splice'\n]\n\nconst adapter = {\n  counter: 0,\n  weakmap: {},\n\n  weakReference: function(obj) {\n    if (!obj.hasOwnProperty('__rv')) {\n      let id = this.counter++\n\n      Object.defineProperty(obj, '__rv', {\n        value: id\n      })\n    }\n\n    if (!this.weakmap[obj.__rv]) {\n      this.weakmap[obj.__rv] = {\n        callbacks: {}\n      }\n    }\n\n    return this.weakmap[obj.__rv]\n  },\n\n  cleanupWeakReference: function(ref, id) {\n    if (!Object.keys(ref.callbacks).length) {\n      if (!(ref.pointers && Object.keys(ref.pointers).length)) {\n        delete this.weakmap[id]\n      }\n    }\n  },\n\n  stubFunction: function(obj, fn) {\n    let original = obj[fn]\n    let map = this.weakReference(obj)\n    let weakmap = this.weakmap\n\n    obj[fn] = (...args) => {\n      let response = original.apply(obj, args)\n\n      Object.keys(map.pointers).forEach(r => {\n        let k = map.pointers[r]\n\n        if (weakmap[r]) {\n          if (weakmap[r].callbacks[k] instanceof Array) {\n            weakmap[r].callbacks[k].forEach(callback => {\n              callback.sync()\n            })\n          }\n        }\n      })\n\n      return response\n    }\n  },\n\n  observeMutations: function(obj, ref, keypath) {\n    if (obj instanceof Array) {\n      let map = this.weakReference(obj)\n\n      if (!map.pointers) {\n        map.pointers = {}\n\n        ARRAY_METHODS.forEach(fn => {\n          this.stubFunction(obj, fn)\n        })\n      }\n\n      if (!map.pointers[ref]) {\n        map.pointers[ref] = []\n      }\n\n      if (map.pointers[ref].indexOf(keypath) === -1) {\n        map.pointers[ref].push(keypath)\n      }\n    }\n  },\n\n  unobserveMutations: function(obj, ref, keypath) {\n    if ((obj instanceof Array) && (obj.__rv != null)) {\n      let map = this.weakmap[obj.__rv]\n\n      if (map) {\n        let pointers = map.pointers[ref]\n\n        if (pointers) {\n          let idx = pointers.indexOf(keypath)\n\n          if (idx > -1) {\n            pointers.splice(idx, 1)\n          }\n\n          if (!pointers.length) {\n            delete map.pointers[ref]\n          }\n\n          this.cleanupWeakReference(map, obj.__rv)\n        }\n      }\n    }\n  },\n\n  observe: function(obj, keypath, callback) {\n    var value;\n    let callbacks = this.weakReference(obj).callbacks\n\n    if (!callbacks[keypath]) {\n      callbacks[keypath] = []\n      let desc = Object.getOwnPropertyDescriptor(obj, keypath)\n\n      if (!desc || !(desc.get || desc.set || !desc.configurable)) {\n        value = obj[keypath]\n\n        Object.defineProperty(obj, keypath, {\n          enumerable: true,\n\n          get: () => {\n            return value\n          },\n\n          set: newValue => {\n            if (newValue !== value) {\n              this.unobserveMutations(value, obj.__rv, keypath)\n              value = newValue\n              let map = this.weakmap[obj.__rv]\n\n              if (map) {\n                let callbacks = map.callbacks[keypath]\n\n                if (callbacks) {\n                  callbacks.forEach(cb => {\n                      cb.sync()\n                  })\n                }\n\n                this.observeMutations(newValue, obj.__rv, keypath)\n              }\n            }\n          }\n        })\n      }\n    }\n\n    if (callbacks[keypath].indexOf(callback) === -1) {\n      callbacks[keypath].push(callback)\n    }\n\n    this.observeMutations(obj[keypath], obj.__rv, keypath)\n  },\n\n  unobserve: function(obj, keypath, callback) {\n    let map = this.weakmap[obj.__rv]\n\n    if (map) {\n      let callbacks = map.callbacks[keypath]\n\n      if (callbacks) {\n        let idx = callbacks.indexOf(callback)\n\n        if (idx > -1) {\n          callbacks.splice(idx, 1)\n\n          if (!callbacks.length) {\n            delete map.callbacks[keypath]\n            this.unobserveMutations(obj[keypath], obj.__rv, keypath)\n          }\n        }\n\n        this.cleanupWeakReference(map, obj.__rv)\n      }\n    }\n  },\n\n  get: function(obj, keypath) {\n    return obj[keypath]\n  },\n\n  set: (obj, keypath, value) => {\n    obj[keypath] = value\n  }\n}\n\nexport default adapter\n","import View from './view';\n\nconst getString = (value) => {\n  return value != null ? value.toString() : undefined;\n};\n\nconst times = (n, cb) => {\n  for (let i = 0; i < n; i++) cb();\n};\n\nfunction createView(binding, data, anchorEl) {\n  let template = binding.el.cloneNode(true);\n  let view = new View(template, data, binding.view.options);\n  view.bind();\n  binding.marker.parentNode.insertBefore(template, anchorEl);\n  return view;\n}\n\nconst binders = {\n  // Binds an event handler on the element.\n  'on-*': {\n    function: true,\n    priority: 1000,\n\n    unbind: function(el) {\n      if (this.handler) {\n        el.removeEventListener(this.arg, this.handler);\n      }\n    },\n\n    routine: function(el, value) {\n      if (this.handler) {\n        el.removeEventListener(this.arg, this.handler);\n      }\n\n      this.handler = this.eventHandler(value);\n      el.addEventListener(this.arg, this.handler);\n    }\n  },\n\n  // Appends bound instances of the element in place for each item in the array.\n  'each-*': {\n    block: true,\n\n    priority: 4000,\n\n    bind: function(el) {\n      if (!this.marker) {\n        this.marker = document.createComment(` tinybind: ${this.type} `);\n        this.iterated = [];\n\n        el.parentNode.insertBefore(this.marker, el);\n        el.parentNode.removeChild(el);\n      } else {\n        this.iterated.forEach(view => {\n          view.bind();\n        });\n      }\n    },\n\n    unbind: function(el) {\n      if (this.iterated) {\n        this.iterated.forEach(view => {\n          view.unbind();\n        });\n      }\n    },\n\n    routine: function(el, collection) {\n      let modelName = this.arg;\n      collection = collection || [];\n      let indexProp = el.getAttribute('index-property') || '$index';\n\n      collection.forEach((model, index) => {\n        let data = {$parent: this.view.models}\n        data[indexProp] = index;\n        data[modelName] = model;\n        let view = this.iterated[index];\n\n        if (!view) {\n\n          let previous = this.marker;\n\n          if (this.iterated.length) {\n            previous = this.iterated[this.iterated.length - 1].els[0]\n          }\n\n          view = createView(this, data, previous.nextSibling);\n          this.iterated.push(view)\n        } else {\n          if (view.models[modelName] !== model) {\n            // search for a view that matches the model\n            let matchIndex, nextView;\n            for (let nextIndex = index + 1; nextIndex < this.iterated.length; nextIndex++) {\n              nextView = this.iterated[nextIndex]\n              if (nextView.models[modelName] === model) {\n                matchIndex = nextIndex;\n                break;\n              }\n            }\n            if (matchIndex !== undefined) {\n              // model is in other position\n              // todo: consider avoiding the splice here by setting a flag\n              // profile performance before implementing such change\n              this.iterated.splice(matchIndex, 1)\n              this.marker.parentNode.insertBefore(nextView.els[0], view.els[0])\n              nextView.models[indexProp] = index;\n            } else {\n              //new model\n              nextView = createView(this, data, view.els[0]);\n            }\n            this.iterated.splice(index, 0, nextView);\n          } else {\n            view.models[indexProp] = index;\n          }\n        }\n      })\n\n      if (this.iterated.length > collection.length) {\n        times(this.iterated.length - collection.length, () => {\n          let view = this.iterated.pop();\n          view.unbind();\n          this.marker.parentNode.removeChild(view.els[0]);\n        })\n      }\n\n      if (el.nodeName === 'OPTION') {\n        this.view.bindings.forEach(binding => {\n          if (binding.el === this.marker.parentNode && binding.type === 'value') {\n            binding.sync();\n          }\n        })\n      }\n    },\n\n    update: function(models) {\n      let data = {};\n\n      //todo: add test and fix if necessary\n\n      Object.keys(models).forEach(key => {\n        if (key !== this.arg) {\n          data[key] = models[key];\n        }\n      })\n\n      this.iterated.forEach(view => {\n        view.update(data);\n      })\n    }\n  },\n\n  // Adds or removes the class from the element when value is true or false.\n  'class-*': function(el, value) {\n    let elClass = ` ${el.className} `;\n\n    if (!value === (elClass.indexOf(` ${this.arg} `) > -1)) {\n      if (value) {\n        el.className = `${el.className} ${this.arg}`;\n      } else {\n        el.className = elClass.replace(` ${this.arg} `, ' ').trim();\n      }\n    }\n  },\n\n  // Sets the element's text value.\n  text: (el, value) => {\n    el.textContent = value != null ? value : '';\n  },\n\n  // Sets the element's HTML content.\n  html: (el, value) => {\n    el.innerHTML = value != null ? value : '';\n  },\n\n  // Shows the element when value is true.\n  show: (el, value) => {\n    el.style.display = value ? '' : 'none';\n  },\n\n  // Hides the element when value is true (negated version of `show` binder).\n  hide: (el, value) => {\n    el.style.display = value ? 'none' : '';\n  },\n\n  // Enables the element when value is true.\n  enabled: (el, value) => {\n    el.disabled = !value;\n  },\n\n  // Disables the element when value is true (negated version of `enabled` binder).\n  disabled: (el, value) => {\n    el.disabled = !!value;\n  },\n\n  // Checks a checkbox or radio input when the value is true. Also sets the model\n  // property when the input is checked or unchecked (two-way binder).\n  checked: {\n    publishes: true,\n    priority: 2000,\n\n    bind: function(el) {\n      var self = this;\n      if (!this.callback) {\n        this.callback = function () {\n          self.publish();\n        }\n      }\n      el.addEventListener('change', this.callback)\n    },\n\n    unbind: function(el) {\n      el.removeEventListener('change', this.callback)\n    },\n\n    routine: function(el, value) {\n      if (el.type === 'radio') {\n        el.checked = getString(el.value) === getString(value)\n      } else {\n        el.checked = !!value\n      }\n    }\n  },\n\n  // Sets the element's value. Also sets the model property when the input changes\n  // (two-way binder).\n  value: {\n    publishes: true,\n    priority: 3000,\n\n    bind: function(el) {\n      this.isRadio = el.tagName === 'INPUT' && el.type === 'radio';\n      if (!this.isRadio) {\n        this.event = el.getAttribute('event-name') || (el.tagName === 'SELECT' ? 'change' : 'input')\n\n        var self = this;\n        if (!this.callback) {\n          this.callback = function () {\n            self.publish();\n          }\n        }\n\n        el.addEventListener(this.event, this.callback)\n      }\n    },\n\n    unbind: function(el) {\n      if (!this.isRadio) {\n        el.removeEventListener(this.event, this.callback)\n      }\n    },\n\n    routine: function(el, value) {\n      if (this.isRadio) {\n        el.setAttribute('value', value)\n      } else {\n        if (el.type === 'select-multiple') {\n          if (value instanceof Array) {\n            for (let i = 0; i < el.length; i++) {\n              let option = el[i];\n              option.selected = value.indexOf(option.value) > -1\n            }\n          }\n        } else if (getString(value) !== getString(el.value)) {\n          el.value = value != null ? value : ''\n        }\n      }\n    }\n  },\n\n  // Inserts and binds the element and it's child nodes into the DOM when true.\n  if: {\n    block: true,\n    priority: 4000,\n\n    bind: function(el) {\n      if (!this.marker) {\n        this.marker = document.createComment(' tinybind: ' + this.type + ' ' + this.keypath + ' ');\n        this.attached = false\n\n        el.parentNode.insertBefore(this.marker, el)\n        el.parentNode.removeChild(el)\n      } else if (this.bound === false && this.nested) {\n        this.nested.bind()\n      }\n      this.bound = true\n    },\n\n    unbind: function() {\n      if (this.nested) {\n        this.nested.unbind()\n        this.bound = false\n      }\n    },\n\n    routine: function(el, value) {\n      if (!!value !== this.attached) {\n        if (value) {\n\n          if (!this.nested) {\n            this.nested = new View(el, this.view.models, this.view.options)\n            this.nested.bind()\n          }\n\n          this.marker.parentNode.insertBefore(el, this.marker.nextSibling)\n          this.attached = true\n        } else {\n          el.parentNode.removeChild(el)\n          this.attached = false\n        }\n      }\n    },\n\n    update: function(models) {\n      if (this.nested) {\n        this.nested.update(models)\n      }\n    }\n  }\n}\n\nexport default binders\n","import tinybind from './tinybind';\nimport View from './view';\nimport {OPTIONS, EXTENSIONS} from './constants';\nimport adapter from './adapter';\nimport binders from './binders';\nimport Observer from './observer';\n\n// Returns the public interface.\n\ntinybind.binders = binders;\ntinybind.adapters['.'] = adapter;\n\n// Binds some data to a template / element. Returns a tinybind.View instance.\ntinybind.bind = (el, models, options) => {\n  let viewOptions = {};\n  models = models || {};\n  options = options || {};\n\n  EXTENSIONS.forEach(extensionType => {\n    viewOptions[extensionType] = Object.create(null);\n\n    if (options[extensionType]) {\n      Object.keys(options[extensionType]).forEach(key => {\n        viewOptions[extensionType][key] = options[extensionType][key];\n      });\n    }\n\n    Object.keys(tinybind[extensionType]).forEach(key => {\n      if (!viewOptions[extensionType][key]) {\n        viewOptions[extensionType][key] = tinybind[extensionType][key];\n      }\n    });\n  });\n\n  OPTIONS.forEach(option => {\n    let value = options[option];\n    viewOptions[option] = value != null ? value : tinybind[option];\n  });\n\n  viewOptions.starBinders = Object.keys(viewOptions.binders).filter(function (key) {\n    return key.indexOf('*') > 0;\n  });\n\n  Observer.updateOptions(viewOptions);\n\n  let view = new View(el, models, viewOptions);\n  view.bind();\n  return view;\n};\n\n// Initializes a new instance of a component on the specified element and\n// returns a tinybind.View instance.\t\t\ntinybind.init = (component, el, data = {}) => {\n  if (!el) {\n    el = document.createElement('div');\n  }\n\n  component = tinybind.components[component];\n  el.innerHTML = component.template.call(tinybind, el);\n  let scope = component.initialize.call(tinybind, el, data);\n\n  let view = tinybind.bind(el, scope);\n  view.bind();\n  return view;\n};\n\ntinybind.formatters.negate = tinybind.formatters.not = function (value) {\n  return !value;\n};\n\nexport default tinybind;\n"],"names":["OPTIONS","EXTENSIONS","QUOTED_STR","parseType","string","type","value","test","slice","undefined","isNaN","Number","parseTemplate","template","delimiters","tokens","length","index","lastIndex","open","close","indexOf","push","substring","lastToken","trim","adapters","interfaces","rootInterface","tinybind","this","_prefix","_fullPrefix","context","ev","binding","call","view","models","el","setAttribute","removeAttribute","options","keys","forEach","option","key","isObject","obj","Observer","keypath","callback","objectPath","parse","getRootObject","target","realize","set","updateOptions","Object","tokenize","root","chr","current","i","path","charAt","prototype","message","Error","substr","pop","prev","token","unreached","get","splice","sync","next","oldValue","newValue","Function","Array","setValue","active","action","unobserve","rootProp","$parent","FORMATTER_ARGS","FORMATTER_SPLIT","Binding","binder","arg","formatters","formatterObservers","model","observe","parseTarget","observer","parseFormatterArguments","args","formatterIndex","map","ai","_this","formattedValue","reduce","result","declaration","match","id","shift","formatter","_this2","processedArgs","read","eventHandler","fn","handler","function","routineFn","routine","publish","reduceRight","split","_this3","getValue","bind","hasOwnProperty","preloadData","unbind","_this4","fi","update","results","checked","selected","ComponentBinding","_Binding","component","components","static","observers","upstreamObservers","bindingPrefix","len","attributes","attribute","name","propertyName","camelCase","stat","locals","replace","toUpperCase","bound","componentView","innerHTML","scope","initialize","_bound","extensionType","childNodes","upstream","textBinder","node","data","DECLARATION_SPLIT","parseNode","block","nodeType","templateDelimiters","text","document","createTextNode","parentNode","insertBefore","buildBinding","removeChild","traverse","bindingComparator","a","b","aPriority","priority","trimStr","str","View","els","jquery","build","pipes","bindings","elements","sort","identifier","nodeName","bindInfos","starBinders","binders","k","fallbackBinder","attr","bindInfo","toLowerCase","publishes","ARRAY_METHODS","adapter","counter","defineProperty","weakmap","__rv","ref","callbacks","pointers","original","weakReference","response","apply","r","stubFunction","idx","cleanupWeakReference","desc","getOwnPropertyDescriptor","configurable","unobserveMutations","observeMutations","getString","toString","createView","anchorEl","cloneNode","marker","removeEventListener","addEventListener","iterated","createComment","collection","modelName","indexProp","getAttribute","matchIndex","nextView","nextIndex","previous","nextSibling","n","cb","elClass","className","textContent","style","display","disabled","self","isRadio","tagName","event","nested","attached","viewOptions","create","filter","init","createElement","negate","not"],"mappings":"oLAAO,IAAMA,EAAU,CACrB,SACA,qBACA,gBACA,cACA,WAGWC,EAAa,CACxB,UACA,aACA,aACA,YCPIC,EAAa,gBAGZ,SAASC,EAAUC,OACpBC,EATY,EAUZC,EAAQF,SAERF,EAAWK,KAAKH,KACVA,EAAOI,MAAM,GAAI,GACL,SAAXJ,KACD,EACY,UAAXA,KACD,EACY,SAAXA,IACD,KACY,cAAXA,SACDK,EACEC,MAAMN,KArBJ,IAsBJO,OAAOP,GAKV,CAACC,KAAMA,EAAMC,MAAOA,GAMtB,SAASM,EAAcC,EAAUC,WAClCC,EACAC,EAASH,EAASG,OAClBC,EAAQ,EACRC,EAAY,EACZC,EAAOL,EAAW,GAAIM,EAAQN,EAAW,GAEtCI,EAAYF,GAAQ,OACjBH,EAASQ,QAAQF,EAAMD,IAEnB,EAAG,CACTH,KACKO,KAAK,MA5CP,QA8CIT,EAASL,MAAMU,kBAMfH,EAAS,IACR,EAARE,GAAaC,EAAYD,KACpBK,KAAK,MAtDP,QAwDIT,EAASL,MAAMU,EAAWD,OAIzBA,EAAQE,EAAKH,UACjBH,EAASQ,QAAQD,EAAOF,IAEpB,EAAG,KACTK,EAAYV,EAASL,MAAMU,EAAYE,EAAMJ,QAC7CQ,EAAYT,EAAOA,EAAOC,OAAS,GAEnCQ,GAnEC,IAmEYA,EAAUnB,OACfC,OAASiB,IAEZD,KAAK,MAtET,QAwEMC,cAOTjB,EAAQO,EAASL,MAAMU,EAAWD,GAAOQ,SAEtCH,KAAK,MAhFF,QAkFDhB,MAGGW,EAAQG,EAAMJ,cAIvBD,MCjFLW,EACAC,EACAC,ECVEC,EAAW,SAEN,cAGG,cAGA,YAGF,WAGD,iBAEI,0BAGJC,KAAKC,oBAGFzB,QACLyB,QAAUzB,OACV0B,YAAc1B,EAAQ,mBAGdM,YAEJT,qBAGS,CAAC,IAAK,mBAGX,iBAGF,UAGJ,SAAS8B,EAASC,EAAIC,QACxBC,KAAKH,EAASC,EAAIC,EAAQE,KAAKC,wBAKtB,SAASC,EAAIjC,GACd,MAATA,IACCkC,aAAaV,KAAKzB,KAAMC,KAExBmC,gBAAgBX,KAAKzB,iBAKjB,SAASqC,cACbA,UAGEC,KAAKD,GAASE,QAAQ,gBACvBtC,EAAQoC,EAAQG,IAEc,EAA9B5C,EAAWoB,QAAQwB,UACdF,KAAKrC,GAAOsC,QAAQ,cACpBC,GAAQC,GAAOxC,EAAMwC,OAGvBD,GAAUvC,MDrEvB,SAASyC,EAASC,SACM,iBAARA,GAA4B,OAARA,EAapC,SAASC,EAASD,EAAKE,EAASC,QACzBD,QAAUA,OACVC,SAAWA,OACXC,WAAa,QACbC,aACAL,IAAMlB,KAAKwB,cAAcN,GAE1BD,EAASjB,KAAKyB,OAASzB,KAAK0B,iBACzBC,KAAI,EAAM3B,KAAKgB,IAAKhB,KAAKyB,OAAQzB,KAAKqB,UAI/CF,EAASS,cAAgB,SAAShB,KACrBA,EAAQhB,WACNiC,OAAOhB,KAAKjB,KACTgB,EAAQd,eAK1BqB,EAASW,SAAW,SAASV,EAASW,OAGhC5C,EAAO6C,EAFP/C,EAAS,GACTgD,EAAU,CAACC,EAAGH,EAAMI,KAAM,QAGzBhD,EAAQ,EAAGA,EAAQiC,EAAQlC,OAAQC,MAChCiC,EAAQgB,OAAOjD,IAEdU,EAAWN,QAAQyC,MACjBxC,KAAKyC,KACF,CAACC,EAAGF,EAAKG,KAAM,OAEjBA,MAAQH,WAIbxC,KAAKyC,GACLhD,GAKTkC,EAASkB,UAAUd,MAAQ,eACrBY,EAAMJ,EAELlC,EAAWX,QAtDlB,SAAeoD,SACP,IAAIC,MAAM,cAAgBD,IAsDxB,gDAGDzC,EAAWN,QAAQS,KAAKoB,QAAQ,OAC9BpB,KAAKoB,QAAQ,KACbpB,KAAKoB,QAAQoB,OAAO,OAEpB1C,IACAE,KAAKoB,cAGTnC,OAASkC,EAASW,SAASK,EAAMJ,QACjCf,IAAMhB,KAAKf,OAAOwD,OAKzBtB,EAASkB,UAAUX,QAAU,mBAGvBgB,EACAC,EAHAV,EAAUjC,KAAKkB,IACf0B,GAAa,EAIRzD,EAAQ,EAAGA,EAAQa,KAAKf,OAAOC,OAAQC,MACtCa,KAAKf,OAAOE,GAChB8B,EAASgB,SAC2B,IAA3BjC,KAAKsB,WAAWnC,GACrB8C,KAAaS,EAAO1C,KAAKsB,WAAWnC,WACjCwC,KAAI,EAAOgB,EAAOD,EAAM1C,WACxB2B,KAAI,EAAMgB,EAAOV,EAASjC,WAC1BsB,WAAWnC,GAAS8C,SAGtBN,KAAI,EAAMgB,EAAOV,EAASjC,WAC1BsB,WAAWnC,GAAS8C,KAGjBjC,KAAK6C,IAAIF,EAAOV,MAEP,IAAfW,MACUzD,IAGVuD,EAAO1C,KAAKsB,WAAWnC,UACpBwC,KAAI,EAAOgB,EAAOD,EAAM1C,cAKhB,IAAf4C,QACGtB,WAAWwB,OAAOF,GAGlBX,GAITd,EAASkB,UAAUU,KAAO,eACpBC,EAAMC,EAAUC,GAEfF,EAAOhD,KAAK0B,aAAe1B,KAAKyB,QAC/BR,EAASjB,KAAKyB,cACXE,KAAI,EAAO3B,KAAKgB,IAAKhB,KAAKyB,OAAQzB,KAAKqB,UAG1CJ,EAAS+B,SACNrB,KAAI,EAAM3B,KAAKgB,IAAKgC,EAAMhD,KAAKqB,YAG3BrB,KAAKxB,aACXiD,OAASuB,MACHhD,KAAKxB,WACCyE,GAAYC,aAAoBC,WAAUnD,KAAKqB,SAAS0B,QAChEC,aAAgBI,YACpB/B,SAAS0B,QAMlB5B,EAASkB,UAAU7D,MAAQ,cACrByC,EAASjB,KAAKyB,eACTzB,KAAK6C,IAAI7C,KAAKgB,IAAKhB,KAAKyB,SAMnCN,EAASkB,UAAUgB,SAAW,SAAS7E,GACjCyC,EAASjB,KAAKyB,WACPzB,KAAKgB,IAAIkB,GAAGP,IAAI3B,KAAKyB,OAAQzB,KAAKgB,IAAImB,KAAM3D,IAKzD2C,EAASkB,UAAUQ,IAAM,SAAS7B,EAAKE,UAC9BtB,EAASoB,EAAIkB,GAAGW,IAAI3B,EAAKF,EAAImB,OAItChB,EAASkB,UAAUV,IAAM,SAAS2B,EAAQtC,EAAKE,EAAKG,OAC9CkC,EAASD,EAAS,UAAY,cACzBtC,EAAIkB,GAAGqB,GAAQrC,EAAKF,EAAImB,KAAMd,IAKzCF,EAASkB,UAAUmB,UAAY,mBACzBtC,EACAyB,EAEKxD,EAAQ,EAAGA,EAAQa,KAAKf,OAAOC,OAAQC,MACtCa,KAAKf,OAAOE,IAChB+B,EAAMlB,KAAKsB,WAAWnC,UACnBwC,KAAI,EAAOgB,EAAOzB,EAAKlB,MAI5BiB,EAASjB,KAAKyB,cACXE,KAAI,EAAO3B,KAAKgB,IAAKhB,KAAKyB,OAAQzB,KAAKqB,WAKhDF,EAASkB,UAAUb,cAAgB,SAAUN,OACvCuC,EAAUxB,MACTf,EAAIwC,eACAxC,QAGLlB,KAAKf,OAAOC,OACHc,KAAKf,OAAO,GAAGkD,KAEfnC,KAAKgB,IAAImB,OAGZjB,EACHe,EAAQyB,cAAkC/E,IAAtBsD,EAAQwB,MACvBxB,EAAQyB,eAGbzB,sGEtLT,IAAM0B,EAAkB,6CAClBC,EAAkB,MAGXC,wBAICtD,EAAME,EAAIlC,EAAM6C,EAAS0C,EAAQC,EAAKC,kBAC3CzD,KAAOA,OACPE,GAAKA,OACLlC,KAAOA,OACP6C,QAAUA,OACV0C,OAASA,OACTC,IAAMA,OACNC,WAAaA,OACbC,mBAAqB,QACrBC,WAAQvF,qBAIfwF,iBAAQjD,EAAKE,UACJ,IAAID,EAASD,EAAKE,EAASpB,mBAGpCoE,0BACMpE,KAAKoB,QAAS,KACZuB,EAAQtE,EAAU2B,KAAKoB,SAER,IAAfuB,EAAMpE,UACHC,MAAQmE,EAAMnE,YAEd6F,SAAWrE,KAAKmE,QAAQnE,KAAKO,KAAKC,OAAQR,KAAKoB,cAC/C8C,MAAQlE,KAAKqE,SAAS5C,kBAGxBjD,WAAQG,eAIjB2F,iCAAwBC,EAAMC,qBACrBD,EACJE,IAAIpG,GACJoG,IAAI,WAAgBC,OAAdnG,IAAAA,KAAMC,IAAAA,SACE,IAATD,SACKC,EAEFmG,EAAKV,mBAAmBO,OACtBP,mBAAmBO,GAAkB,QAGxCH,EAAWM,EAAKV,mBAAmBO,GAAgBE,UAElDL,MACQM,EAAKR,QAAQQ,EAAKpE,KAAKC,OAAQhC,KACrCyF,mBAAmBO,GAAgBE,GAAML,GAGzCA,EAAS7F,uBAOxBoG,wBAAepG,qBACNwB,KAAKgE,WAAWa,OAAO,SAACC,EAAQC,EAAa5F,OAC9CoF,EAAOQ,EAAYC,MAAMrB,GACzBsB,EAAKV,EAAKW,QACVC,EAAYC,EAAK7E,KAAKK,QAAQoD,WAAWiB,GAEvCI,EAAgBD,EAAKd,wBAAwBC,EAAMpF,UAErDgG,GAAcA,EAAUG,gBAAgBnC,WACjCgC,EAAUG,cAAKR,UAAWO,IAC1BF,aAAqBhC,aACrBgC,gBAAUL,UAAWO,KAEzBP,GACNtG,gBAIL+G,sBAAaC,OACPnF,EAAUL,KACVyF,EAAUpF,EAAQE,KAAKK,QAAQ6E,eAE5B,SAASrF,KACNE,KAAKkF,EAAIxF,KAAMI,EAAIC,iBAM/BsB,aAAInD,KACGA,aAAiB2E,WAAcnD,KAAK8D,OAAO4B,SACtC1F,KAAK4E,eAAepG,EAAM8B,KAAKN,KAAKkE,QAEpClE,KAAK4E,eAAepG,OAG1BmH,EAAY3F,KAAK8D,OAAO8B,SAAW5F,KAAK8D,OAExC6B,aAAqBxC,YACb7C,KAAKN,KAAMA,KAAKS,GAAIjC,gBAKlCuE,gBACM/C,KAAKqE,eACFH,MAAQlE,KAAKqE,SAAS5C,YACtBE,IAAI3B,KAAKqE,SAAS7F,eAElBmD,IAAI3B,KAAKxB,oBAKlBqH,iCACM7F,KAAKqE,SAAU,KACb7F,EAAQwB,KAAKgE,WAAW8B,YAAY,SAAChB,EAAQC,EAAa5F,OACtDoF,EAAOQ,EAAYgB,MAAMnC,GACzBqB,EAAKV,EAAKW,QACVC,EAAYa,EAAKzF,KAAKK,QAAQoD,WAAWiB,GACzCI,EAAgBW,EAAK1B,wBAAwBC,EAAMpF,UAErDgG,GAAaA,EAAUU,YAChBV,EAAUU,iBAAQf,UAAWO,KAEjCP,GACN9E,KAAKiG,SAASjG,KAAKS,UAEjB4D,SAAShB,SAAS7E,iBAO3B0H,qBACO9B,cAEDpE,KAAK8D,OAAOqC,eAAe,cACxBrC,OAAOoC,KAAK5F,KAAKN,KAAMA,KAAKS,IAG/BT,KAAKO,KAAKK,QAAQwF,kBACfrD,oBAKTsD,6BACMrG,KAAK8D,OAAOuC,aACTvC,OAAOuC,OAAO/F,KAAKN,KAAMA,KAAKS,IAGjCT,KAAKqE,eACFA,SAASb,mBAGT3C,KAAKb,KAAKiE,oBAAoBnD,QAAQ,gBACvCyD,EAAO+B,EAAKrC,mBAAmBsC,UAE5B1F,KAAK0D,GAAMzD,QAAQ,cACnB4D,GAAIlB,qBAIRS,mBAAqB,gBAK5BuC,sBAAOhG,yDAAS,GACVR,KAAKqE,gBACFH,MAAQlE,KAAKqE,SAAS5C,QAGzBzB,KAAK8D,OAAO0C,aACT1C,OAAO0C,OAAOlG,KAAKN,KAAMQ,gBAKlCyF,kBAASxF,UACHT,KAAK8D,QAAU9D,KAAK8D,OAAOmC,SACtBjG,KAAK8D,OAAOmC,SAAS3F,KAAKN,KAAMS,IA7MvCgG,EAAU,GACE,cAFKhG,EAgNIA,GA9MlBlC,KACEkC,EAAGiG,QACW,oBAAZjG,EAAGlC,QAETqC,QAAQE,QAAQ,YACbC,EAAO4F,YACDnH,KAAKuB,EAAOvC,SAIjBiI,GAEAhG,EAAGjC,OAdd,IAAuBiC,EACjBgG,QCAOG,yBAICrG,EAAME,EAAIlC,0LACpBsI,YAAMtG,EAAME,EAAIlC,EAAM,KAAM,KAAM,KAAM,SACnCgC,KAAOA,IACPE,GAAKA,IACLlC,KAAOA,IACPuI,UAAYvG,EAAKK,QAAQmG,WAAWpC,EAAKpG,QACzCyI,OAAS,KACTC,UAAY,KACZC,kBAAoB,WAErBC,EAAgBpH,SAASG,YAEpBgC,EAAI,EAAGkF,EAAM3G,EAAG4G,WAAWnI,OAAQgD,EAAIkF,EAAKlF,IAAK,KACpDoF,EAAY7G,EAAG4G,WAAWnF,MACgB,IAA1CoF,EAAUC,KAAKhI,QAAQ4H,GAAsB,KAC3CK,EAAe7C,EAAK8C,UAAUH,EAAUC,MACxCG,EAAO/C,EAAKmC,UAAUE,OAEtBU,IAAsC,EAA9BA,EAAKnI,QAAQiI,KAClBR,OAAOQ,GAAgBF,EAAU9I,QAEjCyI,UAAUO,GAAgBF,EAAU9I,kWASjDuE,8BAIAyD,gCAIAX,iCAGA8B,6BACM7C,EAAS,iBAENjE,KAAKb,KAAKgH,QAAQlG,QAAQ,cACxBE,GAAOoE,EAAK4B,OAAOhG,YAGrBH,KAAKb,KAAKiH,WAAWnG,QAAQ,cAC3BE,GAAOoE,EAAK6B,UAAUjG,GAAKxC,UAG7BsG,eAKT2C,mBAAUnJ,UACDA,EAAOsJ,QAAQ,YAAa,cACzB,GAAGC,6BAMf3B,2BACMtF,EAAU,MACTZ,KAAK8H,eACDjH,KAAKb,KAAKiH,WAAWnG,QAAQ,gBAC9BM,EAAU4E,EAAKiB,UAAUjG,KAExBiG,UAAUjG,GAAOgF,EAAK7B,QAAQ6B,EAAKzF,KAAKC,OAAQY,EAAU,mBACtD,aACA2G,cAAcvH,OAAOQ,GAAOgF,EAAKiB,UAAUjG,GAAKxC,UAEtD8B,KAAK0F,EAAMhF,WAGX8G,OAAQ,GAGX9H,KAAK+H,mBACFA,cAAc7B,WACd,MACAzF,GAAGuH,UAAYhI,KAAK8G,UAAU/H,SAASuB,KAAKN,UAC7CiI,EAAQjI,KAAK8G,UAAUoB,WAAW5H,KAAKN,KAAMA,KAAKS,GAAIT,KAAK2H,eAC1DlH,GAAG0H,QAAS,IAGNrH,QAAQ,cACTsH,GAAiB,GAErBpC,EAAKc,UAAUsB,WACVvH,KAAKmF,EAAKc,UAAUsB,IAAgBtH,QAAQ,cACzCsH,GAAepH,GAAOgF,EAAKc,UAAUsB,GAAepH,YAIzDH,KAAKmF,EAAKzF,KAAKK,QAAQwH,IAAgBtH,QAAQ,YAChDF,EAAQwH,GAAepH,OACjBoH,GAAepH,GAAOgF,EAAKzF,KAAK6H,GAAepH,UAKrDF,QAAQ,YACgB,MAA1BkF,EAAKc,UAAU/F,KACTA,GAAUiF,EAAKc,UAAU/F,KAEzBA,GAAUiF,EAAKzF,KAAKQ,UAO3BgH,cAAgBhI,SAASmG,KAAK9C,MAAMf,UAAU3D,MAAM4B,KAAKN,KAAKS,GAAG4H,YAAaJ,EAAOrH,UAEnFC,KAAKb,KAAKiH,WAAWnG,QAAQ,gBAC9BuD,EAAW2B,EAAKiB,UAAUjG,GAC1BR,EAASwF,EAAK+B,cAAcvH,OAE5B8H,EAAWtC,EAAK7B,QAAQ3D,EAAQQ,EAAM,SAACA,EAAKqD,UACvC,aACIhB,SAAS2C,EAAK+B,cAAcvH,OAAOQ,MAE7CV,KAAK0F,EAAMhF,EAAKqD,MAEd6C,kBAAkBlG,GAAOsH,kBAMpCjC,oCACSxF,KAAKb,KAAKkH,mBAAmBpG,QAAQ,cACrCoG,kBAAkBlG,GAAKwC,qBAGvB3C,KAAKb,KAAKiH,WAAWnG,QAAQ,cAC7BmG,UAAUjG,GAAKwC,cAGlBxD,KAAK+H,oBACFA,cAAc1B,OAAO/F,KAAKN,UApJC6D,GCChC0E,EAAa,SACR,SAACC,EAAMhK,KACTiK,KAAiB,MAATjK,EAAiBA,EAAQ,KAIpCkK,EAAoB,+DAEpBC,EAAY,SAAZA,EAAapI,EAAMiI,OACnBI,GAAQ,KAEU,IAAlBJ,EAAKK,SAAgB,KACnB5J,EAASH,EAAc0J,EAAKC,KAAM1I,EAAS+I,uBAE3C7J,EAAQ,KACL,IAAIiD,EAAI,EAAGA,EAAIjD,EAAOC,OAAQgD,IAAK,KAClCS,EAAQ1D,EAAOiD,GACf6G,EAAOC,SAASC,eAAetG,EAAMnE,SACpC0K,WAAWC,aAAaJ,EAAMP,GAEhB,IAAf7F,EAAMpE,QACH6K,aAAaL,EAAM,KAAMpG,EAAMnE,MAAO+J,EAAY,QAItDW,WAAWG,YAAYb,MAEtB,OACmB,IAAlBA,EAAKK,aACNtI,EAAK+I,SAASd,QAGnBI,MACE,IAAI1G,EAAI,EAAGA,EAAIsG,EAAKH,WAAWnJ,OAAQgD,MAChC3B,EAAMiI,EAAKH,WAAWnG,KAKhCqH,EAAoB,SAACC,EAAGC,OACxBC,EAAYF,EAAE1F,QAAU0F,EAAE1F,OAAO6F,UAAiB,SACtCF,EAAE3F,QAAU2F,EAAE3F,OAAO6F,UAAiB,GACnCD,GAGfE,EAAU,SAACC,UACRA,EAAIlK,QAIQmK,wBAIPC,EAAKvJ,EAAQI,aACnBmJ,EAAIC,QAAUD,aAAe3G,WAC1B2G,IAAMA,OAENA,IAAM,CAACA,QAGTvJ,OAASA,OACTI,QAAUA,OAEVqJ,2BAIPb,sBAAaZ,EAAMjK,EAAMwG,EAAajB,EAAQC,OACxCmG,EAAQnF,EAAYC,MAAM0D,GAAmBjE,IAAImF,GAEjDxI,EAAU8I,EAAMhF,aAEfiF,SAAS3K,KAAK,IAAIqE,EAAQ7D,KAAMwI,EAAMjK,EAAM6C,EAAS0C,EAAQC,EAAKmG,iBAKzED,sBACOE,SAAW,OAEY/C,EAAxBgD,EAAWpK,KAAK+J,IAAK7H,aACpBA,EAAI,EAAGkF,EAAMgD,EAASlL,OAAQgD,EAAIkF,EAAKlF,MAChClC,KAAMoK,EAASlI,SAGtBiI,SAASE,KAAKd,gBAGrBD,kBAASd,WAMHjK,EAAMuF,EAAQwG,EAAYvG,EAL1BoD,EAAgBpH,EAASG,YACzB0I,EAA0B,WAAlBJ,EAAK+B,UAA2C,UAAlB/B,EAAK+B,SAC3ClD,EAAamB,EAAKnB,WAClBmD,EAAY,GACZC,EAAczK,KAAKY,QAAQ6J,YAItBvI,EAAI,EAAGkF,EAAMC,EAAWnI,OAAQgD,EAAIkF,EAAKlF,IAAK,KACjDoF,EAAYD,EAAWnF,MACmB,IAA1CoF,EAAUC,KAAKhI,QAAQ4H,GAAsB,MACxCG,EAAUC,KAAK7I,MAAMyI,EAAcjI,eAEpCP,MADGqB,KAAKY,QAAQ8J,QAAQnM,QAIvB,IAAIoM,EAAI,EAAGA,EAAIF,EAAYvL,OAAQyL,SACzBF,EAAYE,GACrBpM,EAAKG,MAAM,EAAG4L,EAAWpL,OAAS,KAAOoL,EAAW5L,MAAM,GAAI,GAAI,GAC3DsB,KAAKY,QAAQ8J,QAAQJ,KACxB/L,EAAKG,MAAM4L,EAAWpL,OAAS,YAMtC4E,MACM/D,EAAS6K,gBAGhB9G,EAAO8E,kBACJQ,aAAaZ,EAAMjK,EAAM+I,EAAU9I,MAAOsF,EAAQC,KAClDpD,gBAAgB2G,EAAUC,OACxB,IAGC/H,KAAK,CAACqL,KAAMvD,EAAWxD,OAAQA,EAAQvF,KAAMA,EAAMwF,IAAKA,SAIjE,IAAI7B,EAAI,EAAGA,EAAIsI,EAAUtL,OAAQgD,IAAK,KACrC4I,EAAWN,EAAUtI,QACpBkH,aAAaZ,EAAMsC,EAASvM,KAAMuM,EAASD,KAAKrM,MAAOsM,EAAShH,OAAQgH,EAAS/G,OACjFpD,gBAAgBmK,EAASD,KAAKtD,aAIhCqB,MACIJ,EAAK+B,SAASQ,cAEjB/K,KAAKY,QAAQmG,WAAWxI,KAAUiK,EAAKL,cACpCgC,SAAS3K,KAAK,IAAIoH,EAAiB5G,KAAMwI,EAAMjK,OAC5C,IAILqK,eAIT1C,qBACOiE,SAASrJ,QAAQ,cACZoF,sBAKZG,uBACO8D,SAASrJ,QAAQ,cACZuF,wBAKZtD,qBACOoH,SAASrJ,QAAQ,cACZiC,sBAKZ8C,wBACOsE,SAASrJ,QAAQ,YAChBT,EAAQyD,QAAUzD,EAAQyD,OAAOkH,aAC3BnF,yBAMdW,6BAAOhG,yDAAS,UACPK,KAAKL,GAAQM,QAAQ,cACrBN,OAAOQ,GAAOR,EAAOQ,UAGvBmJ,SAASrJ,QAAQ,YAChBT,EAAQmG,UACFA,OAAOhG,WC5LjByK,EAAgB,CACpB,OACA,MACA,QACA,UACA,OACA,UACA,UAGIC,EAAU,SACL,UACA,iBAEM,SAAShK,OACjBA,EAAIiF,eAAe,QAAS,KAC3BlB,EAAKjF,KAAKmL,iBAEPC,eAAelK,EAAK,OAAQ,OAC1B+D,WAINjF,KAAKqL,QAAQnK,EAAIoK,aACfD,QAAQnK,EAAIoK,MAAQ,WACZ,KAIRtL,KAAKqL,QAAQnK,EAAIoK,4BAGJ,SAASC,EAAKtG,GAC7BpD,OAAOhB,KAAK0K,EAAIC,WAAWtM,QACxBqM,EAAIE,UAAY5J,OAAOhB,KAAK0K,EAAIE,UAAUvM,eACvCc,KAAKqL,QAAQpG,iBAKZ,SAAS/D,EAAKsE,OACtBkG,EAAWxK,EAAIsE,GACff,EAAMzE,KAAK2L,cAAczK,GACzBmK,EAAUrL,KAAKqL,UAEf7F,GAAM,sCAAIjB,6CACRqH,EAAWF,EAASG,MAAM3K,EAAKqD,iBAE5B1D,KAAK4D,EAAIgH,UAAU3K,QAAQ,gBAC5B6J,EAAIlG,EAAIgH,SAASK,GAEjBT,EAAQS,IACNT,EAAQS,GAAGN,UAAUb,aAAcvH,SAC7B0I,GAAGN,UAAUb,GAAG7J,QAAQ,cACrBiC,WAMV6I,qBAIO,SAAS1K,EAAKqK,EAAKnK,iBAC/BF,aAAekC,MAAO,KACpBqB,EAAMzE,KAAK2L,cAAczK,GAExBuD,EAAIgH,aACHA,SAAW,KAED3K,QAAQ,cACfiL,aAAa7K,EAAKsE,MAItBf,EAAIgH,SAASF,OACZE,SAASF,GAAO,KAGsB,IAAxC9G,EAAIgH,SAASF,GAAKhM,QAAQ6B,MACxBqK,SAASF,GAAK/L,KAAK4B,wBAKT,SAASF,EAAKqK,EAAKnK,MAChCF,aAAekC,OAAuB,MAAZlC,EAAIoK,KAAe,KAC5C7G,EAAMzE,KAAKqL,QAAQnK,EAAIoK,SAEvB7G,EAAK,KACHgH,EAAWhH,EAAIgH,SAASF,MAExBE,EAAU,KACRO,EAAMP,EAASlM,QAAQ6B,IAEhB,EAAP4K,KACOlJ,OAAOkJ,EAAK,GAGlBP,EAASvM,eACLuF,EAAIgH,SAASF,QAGjBU,qBAAqBxH,EAAKvD,EAAIoK,kBAMlC,SAASpK,EAAKE,EAASC,OAC1B7C,SACAgN,EAAYxL,KAAK2L,cAAczK,GAAKsK,cAEnCA,EAAUpK,GAAU,GACbA,GAAW,OACjB8K,EAAOrK,OAAOsK,yBAAyBjL,EAAKE,GAE3C8K,IAAUA,EAAKrJ,KAAOqJ,EAAKvK,MAAQuK,EAAKE,kBACnClL,EAAIE,UAELgK,eAAelK,EAAKE,EAAS,aACtB,MAEP,kBACI5C,OAGJ,eACC0E,IAAa1E,EAAO,GACjB6N,mBAAmB7N,EAAO0C,EAAIoK,KAAMlK,KACjC8B,MACJuB,EAAMW,EAAKiG,QAAQnK,EAAIoK,SAEvB7G,EAAK,KACH+G,EAAY/G,EAAI+G,UAAUpK,GAE1BoK,KACQ1K,QAAQ,cACXiC,WAIJuJ,iBAAiBpJ,EAAUhC,EAAIoK,KAAMlK,UAQR,IAA1CoK,EAAUpK,GAAS7B,QAAQ8B,MACnBD,GAAS5B,KAAK6B,QAGrBiL,iBAAiBpL,EAAIE,GAAUF,EAAIoK,KAAMlK,cAGrC,SAASF,EAAKE,EAASC,OAC5BoD,EAAMzE,KAAKqL,QAAQnK,EAAIoK,SAEvB7G,EAAK,KACH+G,EAAY/G,EAAI+G,UAAUpK,MAE1BoK,EAAW,KACTQ,EAAMR,EAAUjM,QAAQ8B,IAEjB,EAAP2K,MACQlJ,OAAOkJ,EAAK,GAEjBR,EAAUtM,gBACNuF,EAAI+G,UAAUpK,QAChBiL,mBAAmBnL,EAAIE,GAAUF,EAAIoK,KAAMlK,UAI/C6K,qBAAqBxH,EAAKvD,EAAIoK,aAKpC,SAASpK,EAAKE,UACVF,EAAIE,QAGR,SAACF,EAAKE,EAAS5C,KACd4C,GAAW5C,IC5Lb+N,EAAY,SAAC/N,UACD,MAATA,EAAgBA,EAAMgO,gBAAa7N,GAO5C,SAAS8N,EAAWpM,EAASoI,EAAMiE,OAC7B3N,EAAWsB,EAAQI,GAAGkM,WAAU,GAChCpM,EAAO,IAAIuJ,EAAK/K,EAAU0J,EAAMpI,EAAQE,KAAKK,kBAC5CsF,SACG0G,OAAO1D,WAAWC,aAAapK,EAAU2N,GAC1CnM,EAGT,IAAMmK,EAAU,QAEN,WACI,WACA,WAEF,SAASjK,GACXT,KAAKyF,WACJoH,oBAAoB7M,KAAK+D,IAAK/D,KAAKyF,kBAIjC,SAAShF,EAAIjC,GAChBwB,KAAKyF,WACJoH,oBAAoB7M,KAAK+D,IAAK/D,KAAKyF,cAGnCA,QAAUzF,KAAKuF,aAAa/G,KAC9BsO,iBAAiB9M,KAAK+D,IAAK/D,KAAKyF,oBAK7B,QACD,WAEG,SAEJ,SAAShF,GACRT,KAAK4M,YAOHG,SAASjM,QAAQ,cACfoF,eAPF0G,OAAS5D,SAASgE,4BAA4BhN,KAAKzB,eACnDwO,SAAW,KAEb7D,WAAWC,aAAanJ,KAAK4M,OAAQnM,KACrCyI,WAAWG,YAAY5I,YAQtB,SAASA,GACXT,KAAK+M,eACFA,SAASjM,QAAQ,cACfuF,oBAKF,SAAS5F,EAAIwM,cAChBC,EAAYlN,KAAK+D,MACRkJ,GAAc,OACvBE,EAAY1M,EAAG2M,aAAa,mBAAqB,WAE1CtM,QAAQ,SAACoD,EAAO/E,OACrBsJ,EAAO,CAAC/E,QAASiB,EAAKpE,KAAKC,UAC1B2M,GAAahO,IACb+N,GAAahJ,MACd3D,EAAOoE,EAAKoI,SAAS5N,MAEpBoB,KAWCA,EAAKC,OAAO0M,KAAehJ,EAAO,SAEhCmJ,SAAYC,SACPC,EAAYpO,EAAQ,EAAGoO,EAAY5I,EAAKoI,SAAS7N,OAAQqO,UACrD5I,EAAKoI,SAASQ,IACZ/M,OAAO0M,KAAehJ,EAAO,GAC3BqJ,aAIE5O,IAAf0O,KAIGN,SAASjK,OAAOuK,EAAY,KAC5BT,OAAO1D,WAAWC,aAAamE,EAASvD,IAAI,GAAIxJ,EAAKwJ,IAAI,MACrDvJ,OAAO2M,GAAahO,KAGlBsN,EAAW9H,EAAM8D,EAAMlI,EAAKwJ,IAAI,MAExCgD,SAASjK,OAAO3D,EAAO,EAAGmO,UAE1B9M,OAAO2M,GAAahO,MAlClB,KAELqO,EAAW7I,EAAKiI,OAEhBjI,EAAKoI,SAAS7N,WACLyF,EAAKoI,SAASpI,EAAKoI,SAAS7N,OAAS,GAAG6K,IAAI,MAGlD0C,EAAW9H,EAAM8D,EAAM+E,EAASC,eAClCV,SAASvN,KAAKe,MA8BnBP,KAAK+M,SAAS7N,OAAS+N,EAAW/N,QAhH9B,SAACwO,EAAGC,OACX,IAAIzL,EAAI,EAAGA,EAAIwL,EAAGxL,SAgHXlC,KAAK+M,SAAS7N,OAAS+N,EAAW/N,OAAQ,eAC1CqB,EAAOoE,EAAKoI,SAAStK,QACpB4D,WACAuG,OAAO1D,WAAWG,YAAY9I,EAAKwJ,IAAI,MAI5B,WAAhBtJ,EAAG8J,eACAhK,KAAK4J,SAASrJ,QAAQ,YACrBT,EAAQI,KAAOkE,EAAKiI,OAAO1D,YAA+B,UAAjB7I,EAAQ9B,QAC3CwE,iBAMR,SAASvC,cACXiI,EAAO,UAIJ5H,KAAKL,GAAQM,QAAQ,YACtBE,IAAQoE,EAAKrB,QACV/C,GAAOR,EAAOQ,WAIlB+L,SAASjM,QAAQ,cACf0F,OAAOiC,iBAMP,SAAShI,EAAIjC,OAClBoP,MAAcnN,EAAGoN,eAEhBrP,IAA+C,EAApCoP,EAAQrO,YAAYS,KAAK+D,aAElC8J,UADDrP,EACgBiC,EAAGoN,cAAa7N,KAAK+D,IAExB6J,EAAQhG,YAAY5H,KAAK+D,QAAQ,KAAKpE,cAMrD,SAACc,EAAIjC,KACNsP,YAAuB,MAATtP,EAAgBA,EAAQ,SAIrC,SAACiC,EAAIjC,KACNwJ,UAAqB,MAATxJ,EAAgBA,EAAQ,SAInC,SAACiC,EAAIjC,KACNuP,MAAMC,QAAUxP,EAAQ,GAAK,aAI5B,SAACiC,EAAIjC,KACNuP,MAAMC,QAAUxP,EAAQ,OAAS,YAI7B,SAACiC,EAAIjC,KACTyP,UAAYzP,YAIP,SAACiC,EAAIjC,KACVyP,WAAazP,WAKT,YACI,WACD,SAEJ,SAASiC,OACTyN,EAAOlO,KACNA,KAAKqB,gBACHA,SAAW,aACTwE,cAGNiH,iBAAiB,SAAU9M,KAAKqB,kBAG7B,SAASZ,KACZoM,oBAAoB,SAAU7M,KAAKqB,mBAG/B,SAASZ,EAAIjC,GACJ,UAAZiC,EAAGlC,OACFmI,QAAU6F,EAAU9L,EAAGjC,SAAW+N,EAAU/N,KAE5CkI,UAAYlI,UAOd,YACM,WACD,SAEJ,SAASiC,WACR0N,QAAyB,UAAf1N,EAAG2N,SAAmC,UAAZ3N,EAAGlC,MACvCyB,KAAKmO,QAAS,MACZE,MAAQ5N,EAAG2M,aAAa,gBAAiC,WAAf3M,EAAG2N,QAAuB,SAAW,aAEhFF,EAAOlO,KACNA,KAAKqB,gBACHA,SAAW,aACTwE,cAINiH,iBAAiB9M,KAAKqO,MAAOrO,KAAKqB,mBAIjC,SAASZ,GACVT,KAAKmO,WACLtB,oBAAoB7M,KAAKqO,MAAOrO,KAAKqB,mBAInC,SAASZ,EAAIjC,MAChBwB,KAAKmO,UACJzN,aAAa,QAASlC,WAET,oBAAZiC,EAAGlC,SACDC,aAAiB4E,UACd,IAAIlB,EAAI,EAAGA,EAAIzB,EAAGvB,OAAQgD,IAAK,KAC9BnB,EAASN,EAAGyB,KACTyE,UAA0C,EAA/BnI,EAAMe,QAAQwB,EAAOvC,aAGlC+N,EAAU/N,KAAW+N,EAAU9L,EAAGjC,WACxCA,MAAiB,MAATA,EAAgBA,EAAQ,SAOvC,QACK,WACG,SAEJ,SAASiC,GACRT,KAAK4M,QAMgB,IAAf5M,KAAK8H,OAAmB9H,KAAKsO,aACjCA,OAAOpI,aANP0G,OAAS5D,SAASgE,cAAc,cAAgBhN,KAAKzB,KAAO,IAAMyB,KAAKoB,QAAU,UACjFmN,UAAW,IAEbrF,WAAWC,aAAanJ,KAAK4M,OAAQnM,KACrCyI,WAAWG,YAAY5I,SAIvBqH,OAAQ,UAGP,WACF9H,KAAKsO,cACFA,OAAOjI,cACPyB,OAAQ,YAIR,SAASrH,EAAIjC,KACdA,IAAUwB,KAAKuO,WACf/P,GAEGwB,KAAKsO,cACHA,OAAS,IAAIxE,EAAKrJ,EAAIT,KAAKO,KAAKC,OAAQR,KAAKO,KAAKK,cAClD0N,OAAOpI,aAGT0G,OAAO1D,WAAWC,aAAa1I,EAAIT,KAAK4M,OAAOa,kBAC/Cc,UAAW,MAEbrF,WAAWG,YAAY5I,QACrB8N,UAAW,YAKd,SAAS/N,GACXR,KAAKsO,aACFA,OAAO9H,OAAOhG,eClTlBkK,QAAUA,IACV9K,SAAS,KAAOsL,IAGhBhF,KAAO,SAACzF,EAAID,EAAQI,OACvB4N,EAAc,KACThO,GAAU,KACTI,GAAW,KAEVE,QAAQ,cACLsH,GAAiBvG,OAAO4M,OAAO,MAEvC7N,EAAQwH,WACHvH,KAAKD,EAAQwH,IAAgBtH,QAAQ,cAC9BsH,GAAepH,GAAOJ,EAAQwH,GAAepH,YAItDH,KAAKd,EAASqI,IAAgBtH,QAAQ,YACtC0N,EAAYpG,GAAepH,OAClBoH,GAAepH,GAAOjB,EAASqI,GAAepH,UAKxDF,QAAQ,gBACVtC,EAAQoC,EAAQG,KACRA,GAAmB,MAATvC,EAAgBA,EAAQuB,EAASgB,OAG7C0J,YAAc5I,OAAOhB,KAAK2N,EAAY9D,SAASgE,OAAO,SAAU1N,UAChD,EAAnBA,EAAIzB,QAAQ,SAGZqC,cAAc4M,OAEnBjO,EAAO,IAAIuJ,EAAKrJ,EAAID,EAAQgO,YAC3BtI,OACE3F,KAKAoO,KAAO,SAAC7H,EAAWrG,OAAIgI,yDAAO,GAChChI,MACEuI,SAAS4F,cAAc,UAGlB7O,EAASgH,WAAWD,KAC7BkB,UAAYlB,EAAU/H,SAASuB,KAAKP,EAAUU,OAC7CwH,EAAQnB,EAAUoB,WAAW5H,KAAKP,EAAUU,EAAIgI,GAEhDlI,EAAOR,EAASmG,KAAKzF,EAAIwH,YACxB/B,OACE3F,KAGAyD,WAAW6K,OAAS9O,EAASiE,WAAW8K,IAAM,SAAUtQ,UACvDA"}